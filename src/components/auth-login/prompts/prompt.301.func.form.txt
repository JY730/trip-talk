아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 API  문서경로: https://main-practice.codebootcamp.co.kr/graphql
조건-파일경로) 참고할 TSX  파일경로: src/components/auth-login/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/components/auth-login/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/auth-login/hooks/index.form.hook.tsx
조건-파일경로) 구현될 TEST 파일경로: src/components/auth-login/tests/index.form.hook.spec.ts

==============================================

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 network 통신인 경우 2000ms 미만으로 설정할 것.
                - timeout은 network 통신이 아닌 경우 설정하지 않거나, 500ms 미만으로 설정할 것.
                - /auth/login 페이지가 완전히 로드된 후 테스트할 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법

            3) 테스트 API 조건
                3-1) 데이터
                    - 실제데이터를 사용할 것.
                    - Mock데이터 사용하지 말 것.

                3-2) 성공시나리오
                    - API 모킹하지 말 것.
                        - 사용할 email: "a@c.com"
                        - 사용할 password: "1234qwer"

                    - loginUser API: accessToken이 정상적으로 반환되는지 확인할 것.
                    
                    - fetchUserLoggedIn API: _id, name이 정상적으로 반환되는지 확인할 것.

                3-3) 실패시나리오
                    - API 모킹할 것.

핵심요구사항) 다음의 조건에 맞게 회원가입 폼 등록 기능을 step-by-step 으로 구현하고, 적용 결과를 체크리스트로 반환할 것.
            1) 라이브러리조건
                - 폼: 이미 설치되어있는 react-hook-form, @hookform/resolvers를 사용할 것.
                - 검증: 이미 설치되어있는 zod를 사용할 것.
                - API: 이미 설치되어있는 apollo-client를 사용할 것.

            2) 유저시나리오(로그인)
                1. 모든 인풋이 입력되면 로그인버튼을 활성화 할 것.

                2. 로그인버튼을 누르면 로그인API를 요청할 것.
                    2-1) API명: loginUser
                    2-2) 요청데이터: email, password
                    2-3) 응답데이터: { accessToken }
                    2-4) zod 검증 조건
                        - email: '@' 포함
                        - password: 최소 1글자 이상

                3. 로그인에 성공하면, 회원조회API를 요청할 것.
                    3-1) API명: fetchUserLoggedIn
                    3-2) 요청데이터: 헤더에 인증정보 포함 => "Authorization": "Bearer accessToken"
                    3-3) 반환받은 결과를 로컬스토리지에 저장할 것.
                        - loginUser API => key: "accessToken", value: accessToken
                        - fetchUserLoggedIn API => key: "user", value: { _id, name }
                    3-4) 로그인완료모달을 노출하고, 아래의 상황별 지시를 따를 것.

                4. 로그인에 실패하면, 로그인실패모달을 노출하고, 아래의 상황별 지시를 따를 것.
                
                5. 각 상황별 모달의 확인을 누르면, 아래의 지시에 따를 것.
                    5-1) 모달조건
                        - 모달 프로바이더 경로: src/commons/providers/modal/modal.provider.tsx
                        - 이미 셋팅되어있는 modal.provider를 사용할 것.
                        - 이미 셋팅되어있는 modal.provider를 수정하지 말 것.
                        - 모달은 한 번만 보여야 하며, 닫힌 뒤에는 같은 상황에서 다시 나타나지 않도록 할 것.

                    5-2) 공통컴포넌트조건
                        - 로그인완료모달: <Modal />, variant: 'info', actions: 'single'
                        - 로그인실패모달: <Modal />, variant: 'danger', actions: 'single'

                    5-3) 페이지이동조건
                        - commons/constants/url.ts의 페이지URL에 정의된 경로로 이동할 것.

                        - 로그인완료모달:
                            1. '확인' 클릭
                            2. 열려있는 모든 모달을 닫기
                            3. 게시글목록페이지로 이동 => /boards

                        - 로그인실패모달:
                            1. '확인' 클릭
                            2. 열려있는 모든 모달을 닫기

==============================================

이전 요구사항은 참고용이며, 신규 핵심요구사항 작성 시 반영 참고만 할 것.

기존핵심요구사항 요약:
    - react-hook-form + zod를 이용한 로그인 폼 유효성 검사
    - apollo-client 기반 GraphQL API(loginUser, fetchUserLoggedIn) 통신
    - playwright 기반 E2E 테스트 (Mock 없이 실제데이터)
    - 로그인 성공 시 모달 노출 및 페이지 이동 (/boards)
    - 로그인 실패 시 실패모달 노출
    - Modal Provider 수정 금지
    - 테스트 조건:
        - timeout: network < 2000ms / local < 500ms
        - data-testid 기반 로드 대기

==============================================

다음의 기능을 playwright 테스트 기반으로 TDD 방식으로 구현하고, 테스트 통과 시까지 반복할 것.

핵심요구사항)

1) **로그인 폼 검증 및 동작**
    - 모든 인풋은 react-hook-form + zod를 사용하여 관리할 것.
    - 검증 조건:
        - email: '@' 포함 필수
        - password: 최소 1글자 이상 입력
    - 필수 입력 항목을 입력하지 않고 [로그인] 버튼 클릭 시, 각 입력창 아래에 오류 메시지를 출력할 것.
        - 이메일 미입력 시: “이메일을 입력해주세요.”
        - 비밀번호 미입력 시: “비밀번호를 입력해주세요.”
    - 모든 필드가 올바르게 입력되면 버튼 활성화 상태로 변경.

2) **GraphQL 로그인 요청**
    - [로그인] 버튼 클릭 시 `loginUser` GraphQL API 요청.
        - 요청 데이터: { email, password }
        - 응답 데이터: { accessToken }
    - 로그인 성공 시:
        1. 반환된 accessToken을 Zustand 전역 상태로 저장할 것.
        2. localStorage에도 accessToken을 함께 저장할 것.
        3. /boards 페이지로 이동할 것.

3) **전역 상태 관리 (Zustand)**
    - Zustand store 생성 경로: src/commons/stores/useAuth.store.ts
    - store 구조:
        ```ts
        interface AuthState {
          accessToken: string | null;
          setAccessToken: (token: string) => void;
          clearAuth: () => void;
        }
        ```
    - 로그인 성공 시 `setAccessToken(token)` 호출.
    - 로그아웃 시 `clearAuth()`로 상태 초기화.

4) **테스트 조건 (Playwright 기반)**
    - jest, @testing-library/react 사용 금지
    - network timeout < 2000ms
    - local timeout < 500ms
    - data-testid 기반 대기
    - 실제 API 사용 (mock 금지)
    - 성공 시나리오:
        - email: "a@c.com", password: "1234qwer"
        - accessToken 정상 반환 여부 확인
        - 로그인 후 /boards로 이동 여부 확인
    - 실패 시나리오:
        - 잘못된 이메일/비밀번호로 시도 시, 에러 메시지 출력 및 페이지 이동하지 않음

5) **UI/UX 상세 요구**
    - 로그인 버튼은 기본적으로 disabled 상태.
    - 모든 필드 입력 완료 시 활성화.
    - 로그인 성공 시:
        - Zustand에 accessToken 저장.
        - /boards 페이지로 navigate.
    - 로그인 실패 시:
        - 입력창 아래에 “로그인에 실패했습니다.” 메시지 출력.

----------------------------------------------
반환 형식:
작업 완료 후 아래 항목 기준으로 체크리스트를 반환할 것.

- 커서룰(@01-common.mdc, @04-func.mdc) 적용 여부  
-  react-hook-form + zod 검증 로직 적용 여부  
-  필수 입력 누락 시 오류 메시지 표시 여부  
-  GraphQL loginUser 요청 정상 동작 여부  
-  Zustand 전역 상태(accessToken) 저장 여부  
-  localStorage 동기화 여부  
-  로그인 성공 시 /boards 이동 여부  
-  playwright 테스트 통과 여부
----------------------------------------------


