아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 API  문서경로: https://main-practice.codebootcamp.co.kr/graphql
조건-파일경로) 참고할 TSX  파일경로: src/components/boards/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/components/boards/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/boards/hooks/index.binding.hook.tsx
조건-파일경로) 구현될 TEST 파일경로: src/components/boards/tests/index.binding.hook.spec.ts

==============================================

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 network 통신인 경우 2000ms 미만으로 설정할 것.
                - timeout은 network 통신이 아닌 경우 설정하지 않거나, 500ms 미만으로 설정할 것.
                - /boards 페이지가 완전히 로드된 후 테스트할 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법

            3) 테스트 로컬스토리지 조건
                3-1) 데이터
                    - api 데이터를 사용할 것.
                    - Mock데이터 사용하지 말 것. 

==============================================

핵심요구사항) 다음의 조건에 맞게 게시글 목록 조회 기능을 step-by-step 으로 구현하고, 적용 결과를 체크리스트로 반환할 것.
            1) 라이브러리조건
                - API 통신: 이미 설치되어있는 apollo-client를 사용할 것.
                - 상태관리: React의 useState, useEffect 훅을 사용할 것.
                - 타입검증: GraphQL 타입을 기반으로 작성할 것.

            2) 유저시나리오
                1. 사용자가 /boards 페이지에 접속하면, GRAPHQL-API(fetchBoards)를 사용하여 게시글 목록 데이터를 조회할 것.
                    1-1) fetchBoards API에서 반환된 실제 데이터를 화면에 렌더링할 것.
                    1-2) mock 데이터는 절대 사용하지 말 것.
                    1-3) 데이터 로드 중에는 “로딩 중입니다.” 문구를 화면에 표시할 것.

                2. 게시글 목록에는 다음 정보가 포함되어야 함.
                    - 번호(게시글 번호)
                    - 제목
                    - 작성자
                    - 날짜

                3. 게시글 번호는 GRAPHQL-API(fetchBoardsCount)를 활용하여 계산할 것.
                    - 총 게시글 개수를 fetchBoardsCount로 조회하고, 각 게시글에 번호를 순서대로 부여할 것.

                4. 게시글 제목을 클릭하면 해당 게시글 상세페이지(/boards/[id])로 이동하도록 구현할 것.
                    - 이동 시 router.push(`/boards/${id}`)를 사용할 것.
                    - 링크 클릭 시 실제 라우팅이 정상 동작하는지 테스트할 것.

                5. 네트워크 에러 또는 통신 실패 시
                    - “게시글을 불러오는 중 오류가 발생했습니다. 다시 시도해주세요.” 메시지를 화면에 표시할 것.
                    - try-catch문을 활용할 것.

==============================================

핵심요구사항) 테스트 구현 조건
            1) playwright 기반으로 테스트를 작성할 것.
            2) 테스트 파일 경로: src/components/boards/tests/index.binding.hook.spec.ts
            3) 테스트 시나리오
                - 페이지 접근 시 data-testid로 페이지 로드 완료를 식별할 것.
                - fetchBoards 요청이 정상적으로 수행되어 게시글 목록이 표시되는지 검증할 것.
                - 게시글 제목 클릭 시, 상세페이지로 이동하는지 검증할 것.
                - API 호출 실패 시 오류 메시지가 화면에 표시되는지 검증할 것.
            4) timeout 설정
                - API 요청 테스트: 2000ms 미만
                - UI 렌더링 테스트: 500ms 미만

==============================================

핵심요구사항) 구현 파일 구성
            1) index.binding.hook.tsx
                - fetchBoards, fetchBoardsCount API를 호출하는 커스텀 훅을 구현할 것.
                - API 요청은 apollo-client의 useQuery 훅을 사용할 것.
                - 로딩/에러/데이터 상태를 반환할 것.
                - 에러 발생 시 try-catch문에서 메시지 처리할 것.

            2) index.tsx
                - 커스텀 훅(index.fetch.hook.tsx)을 호출하여 데이터를 화면에 바인딩할 것.
                - 제목 클릭 시 상세페이지로 이동하도록 구현할 것.


            

==============================================

출력결과) 
1. 위의 요구사항이 모두 반영된 전체 코드 구조
2. 테스트 통과 여부 및 각 단계별 체크리스트
3. 커서룰(@01-common.mdc, @04-func.mdc) 적용 결과
