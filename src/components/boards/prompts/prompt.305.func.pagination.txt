아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 API  문서경로: https://main-practice.codebootcamp.co.kr/graphql
조건-파일경로) 참고할 TSX  파일경로: src/components/boards/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/components/boards/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/boards/hooks/index.pagination.hook.ts
조건-파일경로) 구현될 TEST 파일경로: src/components/boards/tests/index.pagination.hook.spec.ts

==============================================

핵심요구사항) 병렬처리 구현을 위한 작업 방식 조건
            - 다른 채팅에서 개발중인 파일을 수정 및 삭제 하지 말 것.
            - 테스트 충돌을 방지하기 위해, 빌드테스트, 전체테스트를 하지 말 것.

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
                - 모든 페이지의 로드 식별 조건은 아래를 따를 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법

            3) 테스트 데이터 조건
                - 실제 API 데이터를 사용할 것.
                - Mock데이터 사용하지 말 것. (mock 데이터는 절대 사용하지 말 것.)

==============================================

핵심요구사항) 다음의 조건에 맞게 게시글 페이지네이션 기능을 step-by-step 으로 구현하고, 적용 결과를 체크리스트로 반환할 것.
            1) API조건
                - GRAPHQL-API(fetchBoards, fetchBoardsCount)를 사용할 것.
                - fetchBoards API를 통해 게시글 목록 데이터를 불러올 것.
                - fetchBoardsCount API를 통해 전체 게시글 개수를 불러올 것.
                - Apollo Client의 useQuery 훅을 사용할 것.
                - 한 페이지당 게시글 10개를 조회할 것.
                - offset, limit 기반 페이지네이션 방식으로 구현할 것.

            2) 유저시나리오(페이지네이션 클릭하기)
                1. /boards 페이지에 접속하여 API 데이터가 정상적으로 조회되는지 확인할 것.
                2. 한 페이지에 10개의 게시글 목록이 노출되는지 확인할 것.
                3. 페이지 번호가 1, 2, 3, 4, 5 형태로 5개 단위로 노출되는지 확인할 것.
                4. 페이지 번호 클릭 시 해당 페이지 번호에 맞는 게시글 목록이 API 요청을 통해 다시 로드되는지 확인할 것.
                5. 이전 페이지(<), 다음 페이지(>) 버튼 클릭 시 페이지 범위가 5개 단위로 변경되는지 확인할 것.

            3) 유저시나리오(검색결과 페이지네이션하기)
                1. 검색창에 검색어를 입력한 후 엔터 또는 검색 버튼 클릭.
                2. 검색 조건에 맞게 fetchBoards API 요청 파라미터(search) 값을 적용할 것.
                3. 검색 결과에 따라 페이지 수(fetchBoardsCount 기준)가 변경되는지 확인할 것.
                4. 검색된 결과 목록에 맞게 페이지네이션이 정상적으로 동작하는지 확인할 것.

            4) 유저시나리오(필터결과 페이지네이션하기)
                1. 날짜 선택 박스를 클릭하고 시작일~종료일 범위를 선택.
                2. 선택한 기간에 맞게 fetchBoards API 요청 파라미터(startDate, endDate)를 적용할 것.
                3. 기간 필터링 결과에 따라 fetchBoardsCount 값이 변경되는지 확인할 것.
                4. 필터링된 결과 목록에서 페이지네이션이 정상적으로 동작하는지 확인할 것.

            5) 에러처리조건
                1. API 요청 실패 시 try-catch문으로 예외를 처리할 것.
                2. 에러 발생 시 “데이터를 불러오는 중 오류가 발생했습니다. 다시 시도해주세요.” 메시지를 화면에 표시할 것.
                3. 오류 발생 후에도 페이지가 정상적으로 렌더링될 수 있도록 방어 코드를 추가할 것.

==============================================

핵심요구사항) 테스트 구현 조건
            1) playwright 기반으로 테스트를 작성할 것.
            2) 테스트 파일 경로: src/components/boards/tests/index.pagination.hook.spec.ts
            3) 테스트 시나리오
                - 페이지 접근 시 data-testid로 페이지 로드 완료를 식별할 것.
                - fetchBoards, fetchBoardsCount 요청이 정상적으로 수행되는지 검증할 것.
                - 페이지 번호 클릭 시 API 재호출이 발생하며 데이터가 변경되는지 확인할 것.
                - 검색 조건 또는 날짜 필터 적용 후 페이지 수가 변경되는지 검증할 것.
                - API 요청 실패 시 오류 메시지가 노출되는지 검증할 것.
            4) timeout 설정
                - 모든 테스트는 500ms 미만으로 제한할 것.

==============================================

핵심요구사항) 구현 파일 구성
            1) index.pagination.hook.ts
                - fetchBoards, fetchBoardsCount를 호출하여 페이지네이션 데이터를 관리하는 커스텀 훅 구현.
                - 현재 페이지, 전체 페이지 수, 게시글 목록 데이터를 상태로 관리할 것.
                - 페이지 변경 시 refetch를 호출하여 새로운 데이터 요청을 수행할 것.
                - 검색어와 날짜 필터를 포함한 동적 쿼리 조건을 처리할 것.
                - 로딩, 에러 상태를 반환할 것.

            2) index.tsx
                - index.pagination.hook.ts를 호출하여 게시글 목록을 렌더링할 것.
                - 페이지 번호를 클릭하면 해당 페이지의 데이터로 갱신할 것.
                - 검색, 날짜 필터 기능을 제공하고 페이지네이션과 연동할 것.
                - 로딩 중에는 “로딩 중입니다.” 문구를 표시할 것.
                - 에러 발생 시 오류 메시지를 표시할 것.

==============================================

출력결과) 
1. 위의 요구사항이 모두 반영된 전체 코드 구조
2. 테스트 통과 여부 및 각 단계별 체크리스트
3. 커서룰(@01-common.mdc, @04-func.mdc) 적용 결과
