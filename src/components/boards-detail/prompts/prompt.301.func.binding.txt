아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 
아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
- @01-common.mdc
- @04-func.mdc

==============================================
조건-파일경로)
- 참고할 API 문서경로: https://main-practice.codebootcamp.co.kr/graphql
- 참고할 TSX 파일경로: src/components/boards-detail/index.tsx
- 참고할 CSS 파일경로: src/components/boards-detail/styles.module.css
- 구현될 HOOK 파일경로: src/components/boards-detail/hooks/index.binding.hook.ts
- 구현될 TEST 파일경로: src/components/boards-detail/tests/index.binding.hook.spec.ts

==============================================
핵심요구사항)
다음의 기능을 Playwright 테스트 기반의 TDD 방식으로 구현하고, 테스트 통과 시까지 반복하여 개발할 것.

1) 테스트 환경 조건
- 테스트 제외 라이브러리:
  - jest
  - @testing-library/react
- timeout 조건:
  - network 통신 포함: 2000ms 미만
  - network 통신 제외: 500ms 미만 또는 미설정
- 테스트 페이지 로드 조건:
  - data-testid를 활용하여 페이지 로드 대기
  - networkidle 방식 사용 금지

2) API 관련 조건

API명: fetchBoard
요청데이터:
fetchBoard(boardId: ID!)

응답데이터 구조:
{
  _id: ID!
  writer: String
  title: String!
  contents: String!
  youtubeUrl: String
  likeCount: Int!
  dislikeCount: Int!
  images: [String!]
  boardAddress: BoardAddress
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

3) 유저 시나리오

1. 사용자가 /boards/[id] 페이지에 접속하면, 주소(URL)에서 boardId 값을 추출할 것.

2. 추출한 boardId를 이용해 GraphQL API fetchBoard를 호출할 것.
   - Apollo Client를 사용할 것.
   - 응답 데이터가 도착할 때까지 로딩 상태를 처리해야 함.

3. 조회 성공 시:
   - 게시글의 작성자, 제목, 내용을 화면에 표시할 것.
   - 데이터가 비동기적으로 도착하므로, 데이터가 undefined일 때 접근 오류가 발생하지 않도록 방어 로직을 추가할 것.
   - 예: data?.fetchBoard?.title 형태로 접근

4. 조회 중 로딩 상태일 때는 로딩 스피너 또는 “불러오는 중…” 문구를 표시할 것.
   - CSS 파일(styles.module.css)에 로딩 상태를 위한 스타일을 추가할 것.

5. 조회 실패 시:
   - 에러 메시지를 콘솔로 출력하고,
   - “게시글 정보를 불러올 수 없습니다.” 문구를 노출할 것.

==============================================
4) Hook 구현 요구사항 (index.detail.hook.tsx)

useBoardDetail 훅을 다음 요구사항에 맞게 구현할 것.

export const useBoardDetail = () => {
  // 1. Next.js router에서 boardId 추출
  // 2. Apollo Client로 fetchBoard 요청
  // 3. 로딩, 에러, 데이터 상태 관리
  // 4. fetchBoard의 데이터 반환
};

반환 데이터 구조:
{
  data: FetchBoardResponse | null
  loading: boolean
  error: ApolloError | null
}

==============================================
5) Playwright 테스트 요구사항 (index.detail.hook.spec.ts)

1. 페이지가 완전히 로드된 후(data-testid="board-detail-page") 테스트 시작
2. URL에서 boardId를 추출하고, 해당 id의 게시글을 요청
3. 조회 성공 시:
   - data-testid="board-writer"에 작성자 노출
   - data-testid="board-title"에 제목 노출
   - data-testid="board-contents"에 내용 노출
   - _id가 존재하는지 검증
4. 조회 실패 시:
   - API를 모킹하여 실패 응답 시나리오 구현
   - “게시글 정보를 불러올 수 없습니다.” 문구 노출 확인

==============================================
✅ 개발 세부조건

| 항목 | 조건 |
|------|------|
| 폼 | X (조회 전용) |
| 검증 | zod 불필요 |
| API | Apollo Client 사용 |
| 페이지 경로 | /boards/[id] |
| 에러 처리 | null-safe 접근 / 조건부 렌더링 |
| 모달 사용 | 없음 |
| CSS | 로딩, 에러, 본문 표시 레이아웃 구성 |
| 데이터 접근 | 옵셔널 체이닝(?.) 필수 사용 |

==============================================
✅ 체크리스트 (작업 완료 후 제출)
| 구분 | 항목 | 완료 여부 |
|------|------|------------|
| 커서룰 | @01-common.mdc, @04-func.mdc 적용 여부 | ☐ |
| API | fetchBoard 요청 정상 동작 | ☐ |
| API | boardId가 URL에서 정상 추출됨 | ☐ |
| UI | 작성자, 제목, 내용 정상 표시 | ☐ |
| 로딩 | 로딩 상태 표시 구현 | ☐ |
| 에러 | 에러 상태 표시 구현 | ☐ |
| 방어코드 | undefined 접근 방지 코드 적용 | ☐ |
| 테스트 | Playwright 성공 시나리오 통과 | ☐ |
| 테스트 | Playwright 실패 시나리오 통과 | ☐ |

