아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 API 문서경로: https://main-practice.codebootcamp.co.kr/graphql

조건-파일경로) 참고할 TSX  파일경로: src/components/boards-detail/comments/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/components/boards-detail/comments/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/boards-detail/comments/hooks/index.retrospect.binding.hook.ts
조건-파일경로) 구현될 TEST 파일경로: src/components/boards-detail/comments/tests/index.retrospect.binding.hook.spec.ts

==============================================

핵심요구사항) 병렬처리 구현을 위한 작업 방식 조건
            - 다른 채팅에서 개발중인 파일을 수정 및 삭제 하지 말 것.
            - 테스트 충돌을 방지하기 위해, 빌드테스트, 전체테스트를 하지 말 것.

핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 network 통신인 경우 2000ms 미만으로 설정할 것.
                - timeout은 network 통신이 아닌 경우 설정하지 않거나, 500ms 미만으로 설정할 것.
                - /boards/[id] 페이지가 완전히 로드된 후 테스트할 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법

            3) 테스트 API 조건  
                3-1) 데이터  
                    - 실제데이터를 사용할 것.  
                    - Mock데이터 사용하지 말 것. (mock 데이터는 절대 사용하지 말 것) 

                3-2) 성공시나리오  
                    - API 모킹하지 말 것.  
                    - 서버로부터 반환되는 _id, writer, contents, rating, createdAt이 정상적으로 표시되는지 확인할 것.

                3-3) 실패시나리오  
                    - API를 모킹하여 실패 응답을 시뮬레이션  
                    - 네트워크 에러 또는 데이터 파싱 에러 시 화면에 오류 메시지 노출 확인할 것.

==============================================

핵심요구사항) 다음의 조건에 맞게 댓글 조회 기능을 step-by-step 으로 구현하고, 적용 결과를 체크리스트로 반환할 것.

            1) 라이브러리조건
                1-1. API: 이미 설치되어있는 apollo-client를 사용할 것.

            2) 유저시나리오 (댓글 조회하기)
                2-1. 게시글 상세페이지(/boards/[id]) 진입 시, GRAPHQL-API(fetchBoardComments)를 호출할 것.
                2-2. fetchBoardComments의 요청 파라미터 boardId는 URL 파라미터 [id]에서 추출할 것.
                2-3. 요청데이터 구조:
                        query fetchBoardComments($boardId: ID!) {
                            fetchBoardComments(boardId: $boardId) {
                                _id
                                writer
                                contents
                                rating
                                createdAt
                            }
                        }
                2-4. 응답데이터:
                        [{
                            _id: ID!
                            writer: String!
                            contents: String!
                            rating: Float
                            createdAt: DateTime!
                        }]
                2-5. fetchBoardComments 결과로 받은 댓글 데이터를 화면에 바인딩할 것.
                    - 작성자(writer)
                    - 댓글내용(contents)
                    - 평점(rating)
                    - 작성일(createdAt)
                2-6. 댓글 목록은 작성일(createdAt) 기준 내림차순으로 정렬할 것.
                2-7. 댓글이 없는 경우 "등록된 댓글이 없습니다." 문구를 표시할 것.
                2-8. API 호출 실패 시 "댓글을 불러오는데 실패하였습니다. 다시 시도해주세요." 메시지를 화면에 표시할 것.

            3) 네트워크 검증 조건
                - 브라우저 개발자 도구의 네트워크 탭을 통해 요청이 정상적으로 전송되었는지 확인할 것.
                - 요청 실패 시 4xx, 5xx 에러 응답을 수신하지 않아야 함.
                - 응답 성공 시 서버로부터 댓글 배열이 반환되어야 함.

            4) 페이지 로드 조건
                - 페이지 로드 완료 후(data-testid 식별자 대기) fetchBoardComments API를 호출할 것.
                - 로딩 상태를 표시할 것. ("댓글을 불러오는 중입니다..." 등)
                - 로딩 완료 후 정상적으로 댓글 리스트가 렌더링되어야 함.

==============================================

테스트 구현 요구사항 (Playwright)
    1) 테스트 파일 경로: src/components/boards-detail/comments/tests/index.retrospect.binding.hook.spec.ts
    2) 테스트 시나리오:
        - 페이지 로드: /boards/[id] 페이지가 완전히 로드된 후(data-testid 고정식별자 대기) 테스트 시작
        - 성공 시나리오:
            1) 실제 서버 데이터를 사용하여 fetchBoardComments 요청을 전송하고, 응답에 댓글 목록이 포함되는지 검증 (timeout < 2000ms)
            2) 첫 번째 댓글의 작성자와 내용이 화면에 표시되는지 검증
            3) 댓글이 1개 이상 존재하는 경우 "등록된 댓글이 없습니다." 문구가 표시되지 않는지 확인
        - 실패 시나리오:
            1) API를 모킹하여 네트워크 오류 또는 빈 응답을 시뮬레이션
            2) "댓글을 불러오는데 실패하였습니다. 다시 시도해주세요." 메시지가 표시되는지 검증
    3) 테스트 제한:
        - 네트워크 통신 관련 테스트 timeout은 2000ms 미만
        - UI 렌더링 테스트 timeout은 500ms 미만 또는 미설정
        - 테스트에서 mock 데이터 사용 금지(성공시나리오는 실제 API 사용), 실패시나리오만 API 모킹 허용

==============================================

구현 파일 구성 및 역할
    1) src/components/boards-detail/comments/index.tsx
        - UI 레이아웃: 댓글 리스트를 ul/li 또는 div 리스트 형태로 렌더링
        - 각 댓글 아이템에는 작성자, 내용, 평점, 작성일 표시
        - 로딩, 오류, 빈 데이터 상태를 조건부 렌더링으로 처리
        - data-testid를 적절히 추가하여 Playwright에서 요소를 식별 가능하게 할 것

    2) src/components/boards-detail/comments/styles.module.css
        - 댓글 리스트 스타일
        - 작성자, 내용, 평점, 날짜 정렬
        - 로딩/에러 메시지 스타일

    3) src/components/boards-detail/comments/hooks/index.retrospect.binding.hook.ts
        - 훅 이름: useCommentList
        - 내부 동작:
            a) Next.js의 useParams 또는 useRouter로 boardId 추출
            b) Apollo Client의 useQuery(fetchBoardComments) 호출
            c) 로딩, 에러, 데이터 상태 관리
            d) 데이터 정렬 및 반환
        - 반환값:
            {
              comments,
              loading,
              error,
              refetch
            }

    4) src/components/boards-detail/comments/tests/index.retrospect.binding.hook.spec.ts (Playwright)
        - Playwright 테스트로 위 시나리오(성공/실패)를 구현
        - data-testid로 페이지 로드 대기
        - API 성공 시 실제 서버 사용하여 댓글 데이터 검증
        - API 실패 시 network 모킹으로 오류 플로우 검증

==============================================

출력 결과
    1) 위 요구사항이 모두 반영된 전체 코드(파일별 역할 명시)
    2) 구현 후 제출 시 다음 체크리스트를 반환할 것:
        - [ ] @01-common.mdc 적용
        - [ ] @04-func.mdc 적용
        - [ ] src/components/boards-detail/comments/styles.module.css 구현
        - [ ] src/components/boards-detail/comments/hooks/index.retrospect.binding.hook.ts 구현
        - [ ] src/components/boards-detail/comments/tests/index.retrospect.binding.hook.spec.ts 구현
        - [ ] Playwright 테스트 성공(성공 시나리오)
        - [ ] Playwright 테스트 성공(실패 시나리오 - 모킹)
        - [ ] 실제 API로 fetchBoardComments 정상 응답 확인
        - [ ] 댓글 없을 때 “등록된 댓글이 없습니다.” 문구 표시
        - [ ] 에러 시 “댓글을 불러오는데 실패하였습니다. 다시 시도해주세요.” 문구 표시
        - [ ] 네트워크 탭으로 요청 정상 전송 확인

==============================================           

최종목표
    - /boards/[id] 진입 시 fetchBoardComments API가 호출되어 해당 게시글의 댓글 목록이 표시될 것.
    - 서버에서 _id, writer, contents, rating, createdAt이 반환되어야 함.
    - 댓글이 없을 경우 “등록된 댓글이 없습니다.” 문구를 표시할 것.
    - API 실패 시 “댓글을 불러오는데 실패하였습니다. 다시 시도해주세요.” 메시지를 보여줄 것.
    - 모든 테스트 케이스가 Playwright 기반 TDD로 통과되어야 함.
