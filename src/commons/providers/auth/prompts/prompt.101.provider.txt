아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
  - @01-common.mdc

==============================================

조건-파일경로)
  - 구현될 TSX 파일경로: src/commons/providers/auth/auth.provider.tsx

==============================================

핵심요구사항) 완성된 컴포넌트를 layout에서 import하여 연결시킬 것. (children을 감싸도록 만들 것)
  - 연결될 경로: src/app/layout.tsx
  - 연결될 순서: <ApolloClientProviderWrapper /> 보다 위에 위치할 것.

==============================================

핵심요구사항) 다음의 기능을 구현하고, Zustand 스토어와 동기화될 수 있도록 할 것.

페이지URL 경로: commons/constants/url.ts

구현할 기능 목록

  1. 로그인
   - url.ts에 정의된 로그인페이지로 이동할 것.
    → /auth/login

  2. 로그아웃
   - 로컬스토리지에 저장된 accessToken을 제거할 것.
   - 로컬스토리지에 저장된 user를 제거할 것.
   - Zustand 스토어(useAuthStore)에서도 상태를 초기화할 것.
   - url.ts에 정의된 로그인페이지로 이동할 것.
    → /auth/login

  3. 로그인상태검증
   - Zustand 스토어의 accessToken 유무로 로그인 상태를 판별할 것.
   - 컴포넌트 마운트 시, 로컬스토리지의 accessToken을 Zustand에 복원할 것.
   - accessToken은 복호화하지 말고 단순 존재 유무만 확인할 것.
   - useEffect를 활용하여 Zustand의 상태 변화를 구독하고,
    모든 페이지에서 실시간으로 로그인 상태를 유지할 것.
   - 로그인 상태가 해제된 경우 자동으로 /auth/login 으로 이동시킬 것.

  4. 로그인유저정보조회
   - Zustand 스토어의 user 데이터를 반환할 것.
   - 로컬스토리지에 저장된 user 데이터가 있으면 초기 마운트 시 복원할 것.
   - 로그인 상태가 변경될 때마다 최신 user 정보로 갱신할 것.

==============================================

구현방식)

Zustand 스토어 경로: src/commons/stores/useAuth.store.ts
  - 전역 상태 관리 (accessToken, user, setAuth, clearAuth)

AuthProvider 역할
  - Zustand 상태를 구독하여 로그인 상태를 감지
  - 상태 변화 시 자동 리다이렉트 및 동기화 수행
  - children을 감싸 하위 컴포넌트에서 로그인 상태를 사용할 수 있도록 Context 제공

라우팅
  - next/navigation의 useRouter 사용
  - 페이지 이동은 router.push() 기반으로 수행

상태복원 로직
  - 컴포넌트 마운트 시, localStorage → Zustand 복원 로직 실행
  - accessToken 또는 user 정보가 존재할 경우 자동으로 setAuth() 호출

==============================================

주의사항)

- AuthProvider는 ApolloClientProviderWrapper보다 상단에서 감쌀 것.

- Zustand와 localStorage의 불일치를 방지하기 위해 초기화 및 복원 로직을 항상 유지할 것.

- accessToken의 유효성 검사는 서버 검증이 아닌 단순 존재 유무로만 판단할 것.

- 다른 Provider(ApolloClientProviderWrapper, ModalProvider 등)의 코드를 수정하지 말 것.

==============================================

체크리스트)

- AuthProvider가 Zustand 기반으로 로그인 상태를 감지한다.

- 로컬스토리지와 Zustand 상태가 마운트 시 자동으로 동기화된다.

- 로그아웃 시 Zustand와 로컬스토리지가 모두 초기화된다.

- 로그인 상태 변화 시 자동으로 /auth/login 으로 리다이렉트된다.

- AuthProvider가 layout.tsx에서 ApolloClientProviderWrapper보다 먼저 children을 감싼다.